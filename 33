#include <stdio.h>
#include <stdlib.h>

#define MAX_FRAMES 10

// Function to find the optimal page to replace
int findOptimal(int pages[], int n, int frames[], int frameSize, int index) {
    int i, j;
    int res = -1, farthest = index;
    for (i = 0; i < frameSize; ++i) {
        int found = 0;
        for (j = index; j < n; ++j) {
            if (frames[i] == pages[j]) {
                found = 1;
                if (j > farthest) {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }
        if (!found)
            return i;
    }
    return (res == -1) ? 0 : res;
}

// Function to simulate optimal paging
void optimalPageReplacement(int pages[], int n, int frameSize) {
    int frames[MAX_FRAMES];
    int i, j;
    int pageFaults = 0;

    for (i = 0; i < n; ++i) {
        if (i < frameSize) {
            frames[i] = pages[i];
            pageFaults++;
        } else {
            int found = 0;
            for (j = 0; j < frameSize; ++j) {
                if (frames[j] == pages[i]) {
                    found = 1;
                    break;
                }
            }
            if (!found) {
                int pos = findOptimal(pages, n, frames, frameSize, i + 1);
                frames[pos] = pages[i];
                pageFaults++;
            }
        }
    }

    printf("Page Faults: %d\n", pageFaults);
}

int main() {
    int pages[] = {1, 2, 3, 4, 5, 1, 2, 6, 7, 8, 7, 8, 9, 7, 8, 9, 5};
    int n = sizeof(pages) / sizeof(pages[0]);
    int frameSize = 3;

    optimalPageReplacement(pages, n, frameSize);

    return 0;
}
