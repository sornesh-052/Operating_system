#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_READERS 5
#define NUM_WRITERS 2

sem_t mutex, wrt;
int readers_count = 0;

void *reader(void *arg) {
    int reader_id = *(int*)arg;
    while(1) {
        sem_wait(&mutex);
        readers_count++;
        if(readers_count == 1) // First reader
            sem_wait(&wrt);
        sem_post(&mutex);

        // Reading the resource
        printf("Reader %d is reading\n", reader_id);
        sleep(1); // Simulating reading process

        sem_wait(&mutex);
        readers_count--;
        if(readers_count == 0) // Last reader
            sem_post(&wrt);
        sem_post(&mutex);

        // Reading complete
        printf("Reader %d finished reading\n", reader_id);
        sleep(2); // Reader waiting before trying to read again
    }
}

void *writer(void *arg) {
    int writer_id = *(int*)arg;
    while(1) {
        sem_wait(&wrt);

        // Writing to the resource
        printf("Writer %d is writing\n", writer_id);
        sleep(2); // Simulating writing process

        sem_post(&wrt);

        // Writing complete
        printf("Writer %d finished writing\n", writer_id);
        sleep(3); // Writer waiting before trying to write again
    }
}

int main() {
    pthread_t readers[NUM_READERS], writers[NUM_WRITERS];
    int reader_ids[NUM_READERS];
    int writer_ids[NUM_WRITERS];

    sem_init(&mutex, 0, 1);
    sem_init(&wrt, 0, 1);

    // Creating reader threads
    for(int i = 0; i < NUM_READERS; i++) {
        reader_ids[i] = i+1;
        pthread_create(&readers[i], NULL, reader, &reader_ids[i]);
    }

    // Creating writer threads
    for(int i = 0; i < NUM_WRITERS; i++) {
        writer_ids[i] = i+1;
        pthread_create(&writers[i], NULL, writer, &writer_ids[i]);
    }

    // Joining reader threads
    for(int i = 0; i < NUM_READERS; i++)
        pthread_join(readers[i], NULL);

    // Joining writer threads
    for(int i = 0; i < NUM_WRITERS; i++)
        pthread_join(writers[i], NULL);

    sem_destroy(&mutex);
    sem_destroy(&wrt);

    return 0;
}
